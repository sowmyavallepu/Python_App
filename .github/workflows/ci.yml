name: CI Tests, Code Quality & Security with SonarQube

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  test-quality-security:
    runs-on: ubuntu-latest
    name: üß™ Tests, Quality & Security Pipeline with SonarQube

    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: üêç Set up Python 3.9
      uses: actions/setup-python@v4
      with:
        python-version: 3.9

    - name: üì¶ Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-cov safety bandit

    - name: üß™ Run tests with coverage
      run: |
        echo "üß™ Running tests with coverage..."
        pytest --cov=. --cov-report=xml --cov-report=term --cov-report=html -v

    - name: üîç Package Vulnerability Scan (Detailed)
      id: safety-check
      run: |
        echo "üõ°Ô∏è Scanning for vulnerable Python packages..."
        echo "================================================"
        
        safety check --json --output safety-report.json || true
        safety check --output safety-report.txt || true
        
        if [ -f "safety-report.json" ]; then
          vuln_count=$(jq length safety-report.json 2>/dev/null || echo "0")
          echo "SAFETY_VULNS=$vuln_count" >> $GITHUB_ENV
          
          echo ""
          echo "üìä PACKAGE VULNERABILITY SCAN RESULTS:"
          echo "======================================"
          echo "üö® Total Vulnerable Packages: $vuln_count"
          echo ""
          
          if [ "$vuln_count" -gt 0 ]; then
            echo "SAFETY_FAILED=true" >> $GITHUB_ENV
            echo "üö® DETAILED VULNERABLE PACKAGES:"
            echo "--------------------------------"
            
            jq -r '.[] | "
        üî¥ VULNERABILITY FOUND:
           üì¶ Package: \(.package) (version \(.installed_version))
           üö® Issue: \(.vulnerability)
           üÜî CVE ID: \(.id)
           üìä Severity: HIGH
           üîó More info: \(.more_info_url // "N/A")
           üí° Description: \(.advisory // "Security vulnerability detected")
           ----------------------------------------"' safety-report.json 2>/dev/null || echo "Vulnerabilities found in packages"
            
            echo ""
            echo "‚ùå PACKAGE SECURITY CHECK: FAILED"
          else
            echo "‚úÖ No vulnerable packages detected"
            echo "SAFETY_FAILED=false" >> $GITHUB_ENV
          fi
        else
          echo "‚úÖ No vulnerable packages detected"
          echo "SAFETY_FAILED=false" >> $GITHUB_ENV
        fi

    - name: üõ°Ô∏è Code Security Vulnerability Scan (Detailed)
      id: bandit-scan
      run: |
        echo "üîç Scanning code for security vulnerabilities..."
        echo "==============================================="
        
        bandit -r . -f json -o bandit-report.json || true
        bandit -r . -f txt -o bandit-report.txt || true
        bandit -r . || true
        
        if [ -f "bandit-report.json" ]; then
          high_issues=$(jq '[.results[] | select(.issue_severity == "HIGH")] | length' bandit-report.json 2>/dev/null || echo "0")
          medium_issues=$(jq '[.results[] | select(.issue_severity == "MEDIUM")] | length' bandit-report.json 2>/dev/null || echo "0")
          low_issues=$(jq '[.results[] | select(.issue_severity == "LOW")] | length' bandit-report.json 2>/dev/null || echo "0")
          
          echo "BANDIT_HIGH=$high_issues" >> $GITHUB_ENV
          echo "BANDIT_MEDIUM=$medium_issues" >> $GITHUB_ENV
          echo "BANDIT_LOW=$low_issues" >> $GITHUB_ENV
          
          echo ""
          echo "üìä CODE SECURITY VULNERABILITY SCAN RESULTS:"
          echo "==========================================="
          echo "üî¥ High Severity Issues: $high_issues"
          echo "üü° Medium Severity Issues: $medium_issues"
          echo "üîµ Low Severity Issues: $low_issues"
          echo ""
          
          if [ "$high_issues" -gt 0 ]; then
            echo "BANDIT_FAILED=true" >> $GITHUB_ENV
            echo "üö® HIGH SEVERITY VULNERABILITIES FOUND:"
            echo "--------------------------------------"
            
            jq -r '.results[] | select(.issue_severity == "HIGH") | "
        üî¥ HIGH SEVERITY VULNERABILITY:
           üìÅ File: \(.filename)
           üìç Line: \(.line_number)
           üîç Test: \(.test_name)
           üö® Issue: \(.issue_text)
           üí° Description: \(.issue_text)
           ‚ö†Ô∏è  Confidence: \(.issue_confidence)
           üîß Recommendation: Review and fix this security issue
           ----------------------------------------"' bandit-report.json 2>/dev/null
          fi
          
          if [ "$medium_issues" -gt 0 ]; then
            echo ""
            echo "üü° MEDIUM SEVERITY VULNERABILITIES FOUND:"
            echo "----------------------------------------"
            
            jq -r '.results[] | select(.issue_severity == "MEDIUM") | "
        üü° MEDIUM SEVERITY VULNERABILITY:
           üìÅ File: \(.filename)
           üìç Line: \(.line_number)
           üîç Test: \(.test_name)
           üö® Issue: \(.issue_text)
           üí° Description: \(.issue_text)
           ‚ö†Ô∏è  Confidence: \(.issue_confidence)
           üîß Recommendation: Consider fixing this security issue
           ----------------------------------------"' bandit-report.json 2>/dev/null
          fi
          
          if [ "$high_issues" -gt 0 ]; then
            echo ""
            echo "‚ùå CODE SECURITY CHECK: FAILED (High severity issues found)"
          else
            echo "‚úÖ No high severity vulnerabilities detected"
            echo "BANDIT_FAILED=false" >> $GITHUB_ENV
          fi
        else
          echo "‚úÖ No code security vulnerabilities detected"
          echo "BANDIT_FAILED=false" >> $GITHUB_ENV
        fi

    - name: üîó Test SonarQube Connectivity
      run: |
        echo "Testing SonarQube connectivity..."
        echo "Host: ${{ secrets.SONAR_HOST_URL }}"
        
        # Test server reachability
        if curl -f -s -o /dev/null "${{ secrets.SONAR_HOST_URL }}/api/system/status"; then
          echo "‚úÖ SonarQube server is reachable"
        else
          echo "‚ùå Cannot reach SonarQube server"
          echo "Please check if server is running at: ${{ secrets.SONAR_HOST_URL }}"
          exit 1
        fi
        
        # Test authentication
        if curl -f -s -u "${{ secrets.SONAR_TOKEN }}:" "${{ secrets.SONAR_HOST_URL }}/api/authentication/validate"; then
          echo "‚úÖ Authentication successful"
        else
          echo "‚ùå Authentication failed"
          echo "Please check SONAR_TOKEN is valid"
          exit 1
        fi

    - name: üîç Debug SonarQube Configuration
      run: |
        echo "=== SonarQube Debug Information ==="
        echo "Host URL: ${{ secrets.SONAR_HOST_URL }}"
        echo "Project files present:"
        ls -la sonar-project.properties || echo "No sonar-project.properties found"
        echo "Bandit report:"
        ls -la bandit-report.json || echo "No bandit-report.json found"
        echo "Coverage report:"
        ls -la coverage.xml || echo "No coverage.xml found"
        echo "Working directory contents:"
        ls -la

    - name: üîç SonarQube Manual Scanner
      run: |
        echo "Using manual SonarQube scanner for better compatibility..."
        
        # Download compatible scanner version for older SonarQube
        wget -O sonar-scanner.zip https://binaries.sonarsource.com/Distribution/sonar-scanner-cli/sonar-scanner-cli-4.8.0.2856-linux.zip
        unzip sonar-scanner.zip
        export PATH=$PATH:$(pwd)/sonar-scanner-4.8.0.2856-linux/bin
        
        # Run analysis with comprehensive parameters
        sonar-scanner \
          -Dsonar.projectKey=Python_App \
          -Dsonar.projectName=Python_App \
          -Dsonar.projectVersion=1.0 \
          -Dsonar.sources=app \
          -Dsonar.tests=tests \
          -Dsonar.sourceEncoding=UTF-8 \
          -Dsonar.host.url=${{ secrets.SONAR_HOST_URL }} \
          -Dsonar.login=${{ secrets.SONAR_TOKEN }} \
          -Dsonar.python.coverage.reportPaths=coverage.xml \
          -Dsonar.python.bandit.reportPaths=bandit-report.json \
          -Dsonar.qualitygate.wait=false \
          -Dsonar.scm.provider=git \
          -Dsonar.exclusions="**/tests/**,**/__pycache__/**,**/venv/**,**/.venv/**" \
          -X

    - name: üì§ Upload Security Reports
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: security-reports
        path: |
          bandit-report.json
          bandit-report.txt
          safety-report.json
          safety-report.txt
          coverage.xml

    - name: üìä Security Vulnerability Summary
      if: always()
      run: |
        echo "üõ°Ô∏è COMPREHENSIVE SECURITY SCAN SUMMARY"
        echo "====================================="
        echo ""
        
        safety_vulns=${SAFETY_VULNS:-0}
        echo "üì¶ PACKAGE VULNERABILITIES: $safety_vulns"
        
        bandit_high=${BANDIT_HIGH:-0}
        bandit_medium=${BANDIT_MEDIUM:-0}
        bandit_low=${BANDIT_LOW:-0}
        echo "üîç CODE SECURITY ISSUES:"
        echo "   üî¥ High Severity: $bandit_high"
        echo "   üü° Medium Severity: $bandit_medium"
        echo "   üîµ Low Severity: $bandit_low"
        echo ""
        
        total_critical=$((safety_vulns + bandit_high))
        if [ "$total_critical" -gt 0 ]; then
          echo "üö® OVERALL STATUS: CRITICAL ISSUES FOUND ($total_critical)"
          echo "‚ùå BUILD FAILED: Security vulnerabilities must be addressed"
          echo ""
          echo "üìã NEXT STEPS:"
          echo "1. Review detailed vulnerability information above"
          echo "2. Check SonarQube dashboard for additional insights"
          echo "3. Fix high severity vulnerabilities before deployment"
          echo "4. Update vulnerable packages to secure versions"
          exit 1
        elif [ "$bandit_medium" -gt 0 ]; then
          echo "‚ö†Ô∏è  OVERALL STATUS: MEDIUM ISSUES FOUND ($bandit_medium)"
          echo "‚úÖ BUILD PASSED: But consider addressing medium severity issues"
        else
          echo "‚úÖ OVERALL STATUS: NO SECURITY ISSUES FOUND"
          echo "üéâ BUILD PASSED: All security checks successful"
        fi
        
        echo ""
        echo "üîó VIEW DETAILED ANALYSIS:"
        echo "   ‚Ä¢ SonarQube Dashboard: ${{ secrets.SONAR_HOST_URL }}/dashboard?id=Python_App"
        echo "   ‚Ä¢ Security Reports: Available in build artifacts"
