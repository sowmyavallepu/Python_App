name: CI Tests, Code Quality & Security with SonarQube

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  # SECURITY GATE - Must pass before anything else runs
  security-gate:
    runs-on: ubuntu-latest
    name: Security Gate - Zero Tolerance Policy
    outputs:
      security-passed: ${{ steps.final-check.outputs.passed }}
      coverage-percentage: ${{ steps.coverage-test.outputs.coverage_percentage }}
    
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Set up Python 3.9
      uses: actions/setup-python@v4
      with:
        python-version: 3.9

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    # SPELL CHECK - First step as requested
    - name: Spell Check
      id: spell-check
      run: |
        echo "Running Spell Check..."
        mkdir -p pipeline-reports
        if codespell --check-filenames --check-hidden --skip="*.git,*.pyc,__pycache__,*.jpg,*.png,*.svg" . > pipeline-reports/spell-check-report.txt 2>&1; then
          echo "✅ Spell check: PASSED"
        else
          echo "❌ Spell check: FAILED"
          cat pipeline-reports/spell-check-report.txt
          exit 1
        fi

    # COVERAGE TEST - 95% requirement
    - name: Run tests with 95% coverage requirement
      id: coverage-test
      run: |
        echo "Running tests with 95% coverage requirement..."
        mkdir -p pipeline-reports
        
        if pytest --cov=. \
           --cov-report=xml \
           --cov-report=term \
           --cov-report=html \
           --cov-fail-under=95 \
           --cov-config=.coveragerc \
           -v > pipeline-reports/coverage-report.txt 2>&1; then
          coverage_percentage=$(grep -o 'TOTAL.*[0-9]\+%' pipeline-reports/coverage-report.txt | grep -o '[0-9]\+%' | tail -1 || echo "95%")
          echo "✅ Coverage test: PASSED - $coverage_percentage coverage"
          echo "coverage_percentage=$coverage_percentage" >> $GITHUB_OUTPUT
        else
          echo "❌ Coverage test: FAILED - Below 95% requirement"
          cat pipeline-reports/coverage-report.txt
          exit 1
        fi

    # ENHANCED ZERO-TOLERANCE SECURITY SCAN
    - name: Enhanced Zero-Tolerance Security Scan
      id: security-scan
      run: |
        echo "Implementing zero-vulnerability policy as requested by management..."
        echo "=================================================================="
        mkdir -p pipeline-reports
        
        # Run comprehensive security scans
        bandit -r . -f json -o pipeline-reports/bandit-report.json --severity-level low || true
        safety check --json --output pipeline-reports/safety-report.json || true
        pip-audit --format=json --output=pipeline-reports/pip-audit-report.json || true
        
        # Count ALL security issues
        bandit_high=$(jq '[.results[] | select(.issue_severity == "HIGH")] | length' pipeline-reports/bandit-report.json 2>/dev/null || echo "0")
        bandit_medium=$(jq '[.results[] | select(.issue_severity == "MEDIUM")] | length' pipeline-reports/bandit-report.json 2>/dev/null || echo "0")
        bandit_low=$(jq '[.results[] | select(.issue_severity == "LOW")] | length' pipeline-reports/bandit-report.json 2>/dev/null || echo "0")
        safety_total=$(jq 'length' pipeline-reports/safety-report.json 2>/dev/null || echo "0")
        
        bandit_total=$((bandit_high + bandit_medium + bandit_low))
        total_vulnerabilities=$((bandit_total + safety_total))
        
        echo ""
        echo "=== COMPREHENSIVE SECURITY SCAN RESULTS ==="
        echo "Code Security Issues (Bandit):"
        echo "  High Severity: $bandit_high"
        echo "  Medium Severity: $bandit_medium"
        echo "  Low Severity: $bandit_low"
        echo "  Total Code Issues: $bandit_total"
        echo ""
        echo "Package Vulnerabilities (Safety): $safety_total"
        echo "TOTAL SECURITY ISSUES: $total_vulnerabilities"
        echo ""
        
        # Manager's directive: Zero tolerance for ANY vulnerabilities
        if [ "$total_vulnerabilities" -gt 0 ]; then
          echo "SECURITY POLICY VIOLATION"
          echo "========================="
          echo "Manager directive: Zero vulnerabilities allowed in production"
          echo "BUILD BLOCKED until ALL security issues are resolved"
          echo ""
          echo "Action required:"
          echo "1. Fix ALL $bandit_total code security issues"
          echo "2. Update ALL $safety_total vulnerable packages"
          echo "3. Re-run build after fixes are implemented"
          echo ""
          echo "PIPELINE EXECUTION TERMINATED"
          exit 1
        fi
        
        echo "SECURITY VALIDATION PASSED"
        echo "========================="
        echo "Zero vulnerabilities detected - code approved for production"

    # FINAL GATE CHECK
    - name: Security Gate Final Check
      id: final-check
      run: |
        echo "All security checks passed - authorizing pipeline continuation"
        echo "passed=true" >> $GITHUB_OUTPUT

  # BUILD AND DEPLOY - Only runs if security gate passes
  build-and-deploy:
    needs: security-gate
    if: needs.security-gate.outputs.security-passed == 'true'
    runs-on: ubuntu-latest
    name: Build and Deploy
    
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Set up Python 3.9
      uses: actions/setup-python@v4
      with:
        python-version: 3.9

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    # BUILD APPLICATION
    - name: Build Application
      id: build
      run: |
        echo "Building Application..."
        mkdir -p pipeline-reports
        if python -m py_compile app/*.py > pipeline-reports/build-report.txt 2>&1; then
          echo "✅ Build: PASSED"
        else
          echo "❌ Build: FAILED"
          cat pipeline-reports/build-report.txt
          exit 1
        fi

    # SONARQUBE ANALYSIS
    - name: Set up JDK 17 for SonarQube
      uses: actions/setup-java@v4
      with:
        distribution: 'temurin'
        java-version: '17'

    - name: SonarQube Scanner
      continue-on-error: true
      run: |
        echo "Running SonarQube analysis..."
        
        # Download compatible scanner version
        wget -q -O sonar-scanner.zip https://binaries.sonarsource.com/Distribution/sonar-scanner-cli/sonar-scanner-cli-5.0.1.3006-linux.zip
        unzip -q sonar-scanner.zip
        export PATH=$PATH:$(pwd)/sonar-scanner-5.0.1.3006-linux/bin
        
        # Create sonar-project.properties
        cat > sonar-project.properties << EOF
        sonar.projectKey=Python_App
        sonar.projectName=Python_App
        sonar.projectVersion=1.0
        sonar.sources=app
        sonar.tests=tests
        sonar.sourceEncoding=UTF-8
        sonar.python.coverage.reportPaths=coverage.xml
        sonar.exclusions=**/tests/**,**/__pycache__/**,**/venv/**,**/.venv/**,**/HttpExample/**,**/vulnerable_code_examples.py
        EOF
        
        # Run scanner
        sonar-scanner \
          -Dsonar.host.url=${{ secrets.SONAR_HOST_URL }} \
          -Dsonar.login=${{ secrets.SONAR_TOKEN }} \
          -Dsonar.qualitygate.wait=false

    # DEPLOY TO AZURE
    - name: Deploy to Azure Function App
      if: github.ref == 'refs/heads/main'
      id: deploy
      uses: Azure/functions-action@v1
      with:
        app-name: ${{ secrets.AZURE_FUNCTIONAPP_NAME }}
        package: '.'
        publish-profile: ${{ secrets.AZURE_FUNCTIONAPP_PUBLISH_PROFILE }}

    # SUCCESS REPORT
    - name: Pipeline Success Report
      run: |
        echo ""
        echo "PIPELINE SUCCESS - SECURITY COMPLIANCE ACHIEVED"
        echo "=============================================="
        echo "Security Gate: PASSED - Zero vulnerabilities"
        echo "Coverage: PASSED - ${{ needs.security-gate.outputs.coverage-percentage }}"
        echo "Build: PASSED"
        echo "Deploy: ${{ steps.deploy.outcome || 'SKIPPED' }}"
        echo ""
        echo "Manager's Zero-Tolerance Security Policy: COMPLIANT"
        echo "Code approved for production deployment"
