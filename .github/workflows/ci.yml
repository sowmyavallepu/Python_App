name: CI Tests, Code Quality & Security with SonarQube

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  test-quality-security:
    runs-on: ubuntu-latest
    name: Tests, Quality & Security Pipeline with SonarQube

    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Set up Python 3.9
      uses: actions/setup-python@v4
      with:
        python-version: 3.9

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-cov safety bandit

    - name: Run tests with coverage
      run: |
        echo "Running tests with coverage..."
        pytest --cov=. --cov-report=xml --cov-report=term --cov-report=html -v

    - name: Enhanced Zero-Tolerance Security Scan
      run: |
        echo "Implementing zero-vulnerability policy as requested by management..."
        echo "=================================================================="
        
        # Run comprehensive security scans with strict settings
        bandit -r . -f json -o bandit-report.json --severity-level low || true
        bandit -r . -f txt -o bandit-report.txt || true
        safety check --json --output safety-report.json || true
        safety check --output safety-report.txt || true
        
        # Count ALL security issues (including low severity)
        bandit_high=$(jq '[.results[] | select(.issue_severity == "HIGH")] | length' bandit-report.json 2>/dev/null || echo "0")
        bandit_medium=$(jq '[.results[] | select(.issue_severity == "MEDIUM")] | length' bandit-report.json 2>/dev/null || echo "0")
        bandit_low=$(jq '[.results[] | select(.issue_severity == "LOW")] | length' bandit-report.json 2>/dev/null || echo "0")
        safety_total=$(jq 'length' safety-report.json 2>/dev/null || echo "0")
        
        bandit_total=$((bandit_high + bandit_medium + bandit_low))
        total_vulnerabilities=$((bandit_total + safety_total))
        
        echo ""
        echo "=== COMPREHENSIVE SECURITY SCAN RESULTS ==="
        echo "Code Security Issues (Bandit):"
        echo "  High Severity: $bandit_high"
        echo "  Medium Severity: $bandit_medium"
        echo "  Low Severity: $bandit_low"
        echo "  Total Code Issues: $bandit_total"
        echo ""
        echo "Package Vulnerabilities (Safety): $safety_total"
        echo "TOTAL SECURITY ISSUES: $total_vulnerabilities"
        echo ""
        
        # Show detailed vulnerability information
        if [ "$bandit_high" -gt 0 ]; then
          echo "HIGH SEVERITY CODE VULNERABILITIES:"
          echo "-----------------------------------"
          jq -r '.results[] | select(.issue_severity == "HIGH") | "
        File: \(.filename)
        Line: \(.line_number)
        Issue: \(.issue_text)
        Confidence: \(.issue_confidence)
        ----------------------------------------"' bandit-report.json 2>/dev/null
        fi
        
        if [ "$bandit_medium" -gt 0 ]; then
          echo "MEDIUM SEVERITY CODE VULNERABILITIES:"
          echo "------------------------------------"
          jq -r '.results[] | select(.issue_severity == "MEDIUM") | "
        File: \(.filename)
        Line: \(.line_number)
        Issue: \(.issue_text)
        Confidence: \(.issue_confidence)
        ----------------------------------------"' bandit-report.json 2>/dev/null
        fi
        
        if [ "$safety_total" -gt 0 ]; then
          echo "PACKAGE VULNERABILITIES:"
          echo "-----------------------"
          jq -r '.[] | "
        Package: \(.package) (\(.installed_version))
        Issue: \(.vulnerability)
        CVE: \(.id)
        ----------------------------------------"' safety-report.json 2>/dev/null
        fi
        
        # Manager's directive: Zero tolerance for ANY vulnerabilities
        if [ "$total_vulnerabilities" -gt 0 ]; then
          echo ""
          echo "SECURITY POLICY VIOLATION"
          echo "========================="
          echo "Manager directive: Zero vulnerabilities allowed in production"
          echo "BUILD BLOCKED until ALL security issues are resolved"
          echo ""
          echo "Action required:"
          echo "1. Fix ALL $bandit_total code security issues"
          echo "2. Update ALL $safety_total vulnerable packages"
          echo "3. Re-run build after fixes are implemented"
          echo ""
          echo "Detailed reports available in build artifacts"
          exit 1
        fi
        
        echo "SECURITY VALIDATION PASSED"
        echo "========================="
        echo "Zero vulnerabilities detected - code approved for production"

    - name: Set up JDK 17 for SonarQube
      uses: actions/setup-java@v4
      with:
        distribution: 'temurin'
        java-version: '17'

    - name: Test SonarQube Connectivity
      run: |
        echo "Testing SonarQube connectivity..."
        echo "Host: ${{ secrets.SONAR_HOST_URL }}"
        
        # Test server reachability
        if curl -f -s -o /dev/null "${{ secrets.SONAR_HOST_URL }}/api/system/status"; then
          echo "SonarQube server is reachable"
        else
          echo "Warning: Cannot reach SonarQube server, will attempt scan anyway"
        fi
        
        # Test authentication
        if curl -f -s -u "${{ secrets.SONAR_TOKEN }}:" "${{ secrets.SONAR_HOST_URL }}/api/authentication/validate"; then
          echo "Authentication successful"
        else
          echo "Warning: Authentication issue, will attempt scan anyway"
        fi

    - name: SonarQube Scanner
      continue-on-error: true
      run: |
        echo "Running SonarQube analysis..."
        
        # Download compatible scanner version for latest SonarQube
        wget -q -O sonar-scanner.zip https://binaries.sonarsource.com/Distribution/sonar-scanner-cli/sonar-scanner-cli-5.0.1.3006-linux.zip
        unzip -q sonar-scanner.zip
        export PATH=$PATH:$(pwd)/sonar-scanner-5.0.1.3006-linux/bin
        
        # Create sonar-project.properties for latest version
        cat > sonar-project.properties << EOF
        sonar.projectKey=Python_App
        sonar.projectName=Python_App
        sonar.projectVersion=1.0
        sonar.sources=app
        sonar.tests=tests
        sonar.sourceEncoding=UTF-8
        sonar.python.coverage.reportPaths=coverage.xml
        sonar.python.bandit.reportPaths=bandit-report.json
        sonar.exclusions=**/tests/**,**/__pycache__/**,**/venv/**,**/.venv/**
        EOF
        
        # Run scanner
        sonar-scanner \
          -Dsonar.host.url=${{ secrets.SONAR_HOST_URL }} \
          -Dsonar.login=${{ secrets.SONAR_TOKEN }} \
          -Dsonar.qualitygate.wait=false

    - name: Upload Security Reports
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: security-reports
        path: |
          bandit-report.json
          bandit-report.txt
          safety-report.json
          safety-report.txt
          coverage.xml

    - name: Final Security Status Report
      if: always()
      run: |
        echo "FINAL SECURITY COMPLIANCE REPORT"
        echo "================================"
        echo ""
        echo "Manager's Zero-Tolerance Security Policy: ENFORCED"
        echo "All vulnerabilities must be resolved before production deployment"
        echo ""
        echo "Security Dashboard Links:"
        echo "  • SonarQube Dashboard: ${{ secrets.SONAR_HOST_URL }}/dashboard?id=Python_App"
        echo "  • Security Reports: Available in build artifacts"
        echo "  • Vulnerability Details: See logs above"
        echo ""
        echo "For security issues, refer to the detailed vulnerability information"
        echo "provided in the Enhanced Zero-Tolerance Security Scan step above."
