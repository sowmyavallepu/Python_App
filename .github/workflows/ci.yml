name: CI Tests, Code Quality & Security with SonarQube

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  test-quality-security:
    runs-on: ubuntu-latest
    name: Tests, Quality & Security Pipeline with SonarQube

    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Set up Python 3.9
      uses: actions/setup-python@v4
      with:
        python-version: 3.9

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-cov safety bandit

    - name: Run tests with coverage
      run: |
        echo "Running tests with coverage..."
        pytest --cov=. --cov-report=xml --cov-report=term --cov-report=html -v

    - name: Package Vulnerability Scan (Detailed)
      id: safety-check
      run: |
        echo "Scanning for vulnerable Python packages..."
        echo "================================================"
        
        safety check --json --output safety-report.json || true
        safety check --output safety-report.txt || true
        
        if [ -f "safety-report.json" ]; then
          vuln_count=$(jq length safety-report.json 2>/dev/null || echo "0")
          echo "SAFETY_VULNS=$vuln_count" >> $GITHUB_ENV
          
          echo ""
          echo "PACKAGE VULNERABILITY SCAN RESULTS:"
          echo "======================================"
          echo "Total Vulnerable Packages: $vuln_count"
          echo ""
          
          if [ "$vuln_count" -gt 0 ]; then
            echo "SAFETY_FAILED=true" >> $GITHUB_ENV
            echo "DETAILED VULNERABLE PACKAGES:"
            echo "--------------------------------"
            
            jq -r '.[] | "
        VULNERABILITY FOUND:
           Package: \(.package) (version \(.installed_version))
           Issue: \(.vulnerability)
           CVE ID: \(.id)
           Severity: HIGH
           More info: \(.more_info_url // "N/A")
           Description: \(.advisory // "Security vulnerability detected")
           ----------------------------------------"' safety-report.json 2>/dev/null || echo "Vulnerabilities found in packages"
            
            echo ""
            echo "PACKAGE SECURITY CHECK: FAILED"
          else
            echo "No vulnerable packages detected"
            echo "SAFETY_FAILED=false" >> $GITHUB_ENV
          fi
        else
          echo "No vulnerable packages detected"
          echo "SAFETY_FAILED=false" >> $GITHUB_ENV
        fi

    - name: Code Security Vulnerability Scan (Detailed)
      id: bandit-scan
      run: |
        echo "Scanning code for security vulnerabilities..."
        echo "==============================================="
        
        bandit -r . -f json -o bandit-report.json || true
        bandit -r . -f txt -o bandit-report.txt || true
        bandit -r . || true
        
        if [ -f "bandit-report.json" ]; then
          high_issues=$(jq '[.results[] | select(.issue_severity == "HIGH")] | length' bandit-report.json 2>/dev/null || echo "0")
          medium_issues=$(jq '[.results[] | select(.issue_severity == "MEDIUM")] | length' bandit-report.json 2>/dev/null || echo "0")
          low_issues=$(jq '[.results[] | select(.issue_severity == "LOW")] | length' bandit-report.json 2>/dev/null || echo "0")
          
          echo "BANDIT_HIGH=$high_issues" >> $GITHUB_ENV
          echo "BANDIT_MEDIUM=$medium_issues" >> $GITHUB_ENV
          echo "BANDIT_LOW=$low_issues" >> $GITHUB_ENV
          
          echo ""
          echo "CODE SECURITY VULNERABILITY SCAN RESULTS:"
          echo "==========================================="
          echo "High Severity Issues: $high_issues"
          echo "Medium Severity Issues: $medium_issues"
          echo "Low Severity Issues: $low_issues"
          echo ""
          
          if [ "$high_issues" -gt 0 ]; then
            echo "BANDIT_FAILED=true" >> $GITHUB_ENV
            echo "HIGH SEVERITY VULNERABILITIES FOUND:"
            echo "--------------------------------------"
            
            jq -r '.results[] | select(.issue_severity == "HIGH") | "
        HIGH SEVERITY VULNERABILITY:
           File: \(.filename)
           Line: \(.line_number)
           Test: \(.test_name)
           Issue: \(.issue_text)
           Description: \(.issue_text)
           Confidence: \(.issue_confidence)
           Recommendation: Review and fix this security issue
           ----------------------------------------"' bandit-report.json 2>/dev/null
          fi
          
          if [ "$medium_issues" -gt 0 ]; then
            echo ""
            echo "MEDIUM SEVERITY VULNERABILITIES FOUND:"
            echo "----------------------------------------"
            
            jq -r '.results[] | select(.issue_severity == "MEDIUM") | "
        MEDIUM SEVERITY VULNERABILITY:
           File: \(.filename)
           Line: \(.line_number)
           Test: \(.test_name)
           Issue: \(.issue_text)
           Description: \(.issue_text)
           Confidence: \(.issue_confidence)
           Recommendation: Consider fixing this security issue
           ----------------------------------------"' bandit-report.json 2>/dev/null
          fi
          
          if [ "$high_issues" -gt 0 ]; then
            echo ""
            echo "CODE SECURITY CHECK: FAILED (High severity issues found)"
          else
            echo "No high severity vulnerabilities detected"
            echo "BANDIT_FAILED=false" >> $GITHUB_ENV
          fi
        else
          echo "No code security vulnerabilities detected"
          echo "BANDIT_FAILED=false" >> $GITHUB_ENV
        fi

    - name: Set up JDK 11 for Legacy SonarQube
      uses: actions/setup-java@v4
      with:
        distribution: 'temurin'
        java-version: '11'

    - name: Test SonarQube Connectivity
      run: |
        echo "Testing SonarQube connectivity..."
        echo "Host: ${{ secrets.SONAR_HOST_URL }}"
        
        # Test server reachability
        if curl -f -s -o /dev/null "${{ secrets.SONAR_HOST_URL }}/api/system/status"; then
          echo "SonarQube server is reachable"
        else
          echo "Warning: Cannot reach SonarQube server, will attempt scan anyway"
        fi
        
        # Test authentication
        if curl -f -s -u "${{ secrets.SONAR_TOKEN }}:" "${{ secrets.SONAR_HOST_URL }}/api/authentication/validate"; then
          echo "Authentication successful"
        else
          echo "Warning: Authentication issue, will attempt scan anyway"
        fi

    - name: SonarQube Legacy Scanner
      continue-on-error: true
      run: |
        echo "Using legacy SonarQube scanner for compatibility..."
        
        # Download older, compatible scanner version
        wget -q -O sonar-scanner.zip https://binaries.sonarsource.com/Distribution/sonar-scanner-cli/sonar-scanner-cli-4.6.2.2472-linux.zip
        unzip -q sonar-scanner.zip
        export PATH=$PATH:$(pwd)/sonar-scanner-4.6.2.2472-linux/bin
        
        # Verify Java version
        echo "Java version for SonarQube:"
        java -version
        
        # Create minimal sonar-project.properties for legacy compatibility
        cat > sonar-project.properties << EOF
        sonar.projectKey=Python_App
        sonar.projectName=Python_App
        sonar.projectVersion=1.0
        sonar.sources=app
        sonar.sourceEncoding=UTF-8
        sonar.python.bandit.reportPaths=bandit-report.json
        sonar.exclusions=**/tests/**,**/__pycache__/**,**/venv/**,**/.venv/**
        EOF
        
        # Run legacy scanner with minimal parameters
        sonar-scanner \
          -Dsonar.host.url=${{ secrets.SONAR_HOST_URL }} \
          -Dsonar.login=${{ secrets.SONAR_TOKEN }} \
          -Dsonar.qualitygate.wait=false \
          -Dsonar.log.level=INFO

    - name: SonarQube Alternative Approach
      if: failure()
      run: |
        echo "Legacy scanner failed, trying alternative approach..."
        
        # Use direct API calls for basic analysis
        curl -u "${{ secrets.SONAR_TOKEN }}:" \
          -X POST \
          -F "projectKey=Python_App" \
          -F "projectName=Python_App" \
          -F "sonar.sources=app" \
          "${{ secrets.SONAR_HOST_URL }}/api/projects/create" || echo "Project may already exist"
        
        echo "SonarQube project ensured to exist"

    - name: Upload Security Reports
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: security-reports
        path: |
          bandit-report.json
          bandit-report.txt
          safety-report.json
          safety-report.txt
          coverage.xml

    - name: Security Vulnerability Summary
      if: always()
      run: |
        echo "COMPREHENSIVE SECURITY SCAN SUMMARY"
        echo "====================================="
        echo ""
        
        safety_vulns=${SAFETY_VULNS:-0}
        echo "PACKAGE VULNERABILITIES: $safety_vulns"
        
        bandit_high=${BANDIT_HIGH:-0}
        bandit_medium=${BANDIT_MEDIUM:-0}
        bandit_low=${BANDIT_LOW:-0}
        echo "CODE SECURITY ISSUES:"
        echo "   High Severity: $bandit_high"
        echo "   Medium Severity: $bandit_medium"
        echo "   Low Severity: $bandit_low"
        echo ""
        
        total_critical=$((safety_vulns + bandit_high))
        if [ "$total_critical" -gt 0 ]; then
          echo "OVERALL STATUS: CRITICAL ISSUES FOUND ($total_critical)"
          echo "BUILD FAILED: Security vulnerabilities must be addressed"
          echo ""
          echo "NEXT STEPS:"
          echo "1. Review detailed vulnerability information above"
          echo "2. Check SonarQube dashboard for additional insights"
          echo "3. Fix high severity vulnerabilities before deployment"
          echo "4. Update vulnerable packages to secure versions"
          exit 1
        elif [ "$bandit_medium" -gt 0 ]; then
          echo "OVERALL STATUS: MEDIUM ISSUES FOUND ($bandit_medium)"
          echo "BUILD PASSED: But consider addressing medium severity issues"
        else
          echo "OVERALL STATUS: NO SECURITY ISSUES FOUND"
          echo "BUILD PASSED: All security checks successful"
        fi
        
        echo ""
        echo "VIEW DETAILED ANALYSIS:"
        echo "   • SonarQube Dashboard: ${{ secrets.SONAR_HOST_URL }}/dashboard?id=Python_App"
        echo "   • Security Reports: Available in build artifacts"
