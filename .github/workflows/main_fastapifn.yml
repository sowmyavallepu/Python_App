name: Build and deploy Python app to Azure Function App

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  workflow_dispatch:

env:
  AZURE_FUNCTIONAPP_PACKAGE_PATH: '.'
  PYTHON_VERSION: '3.9'

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Disable shallow clone for better SonarQube analysis

    - name: Setup Python version
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install Poetry
      uses: snok/install-poetry@v1
      with:
        version: latest
        virtualenvs-create: true
        virtualenvs-in-project: true
        virtualenvs-path: .venv

    - name: Load cached venv
      id: cached-poetry-dependencies
      uses: actions/cache@v3
      with:
        path: .venv
        key: venv-${{ runner.os }}-${{ steps.setup-python.outputs.python-version }}-${{ hashFiles('**/poetry.lock') }}

    - name: Install dependencies
      if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
      run: poetry install --no-interaction --no-dev

    - name: Spellcheck
      run: poetry run codespell ./app ./tests

    # UPDATED: Enhanced test coverage for SonarQube
    - name: Run Tests with Coverage
      run: |
        poetry install --with dev
        poetry run pytest \
          --cov=app \
          --cov-report=xml:coverage.xml \
          --cov-report=term-missing \
          --junitxml=test-results.xml \
          tests/ -v

    # NEW: Verify coverage files are created
    - name: Verify coverage files
      run: |
        echo "Generated files:"
        ls -la *.xml || echo "No XML files found"
        echo "Coverage XML content (first 10 lines):"
        head -10 coverage.xml || echo "coverage.xml not found"

    # NEW: SonarQube Scan
    - name: SonarQube Scan
      uses: sonarsource/sonarqube-scan-action@master
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}

    # NEW: SonarQube Quality Gate check
    - name: SonarQube Quality Gate check
      id: sonarqube-quality-gate-check
      uses: sonarqube-quality-gate-action@master
      timeout-minutes: 5
      env:
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}

    - name: Create requirements.txt for Azure Functions
      run: |
        poetry export -f requirements.txt --output requirements.txt --without-hashes
        # Remove development dependencies that might cause issues
        sed -i '/grpcio/d' requirements.txt
        sed -i '/grpcio-tools/d' requirements.txt
        # Add essential Azure Functions dependencies
        echo "azure-functions" >> requirements.txt
        echo "azure-functions-worker" >> requirements.txt

    - name: Upload artifact for deployment job
      uses: actions/upload-artifact@v3
      with:
        name: python-app
        path: |
          .
          !venv/
          !.git/
          !.github/
          !tests/
          !.pytest_cache/
          !__pycache__/
          !.coverage
          !coverage.xml
          !test-results.xml

  deploy:
    runs-on: ubuntu-latest
    needs: build
    # Only deploy on main branch (not on pull requests)
    if: github.ref == 'refs/heads/main'
    environment:
      name: 'Production'
      url: ${{ steps.deploy-to-function.outputs.webapp-url }}

    steps:
    - name: Download artifact from build job
      uses: actions/download-artifact@v3
      with:
        name: python-app

    - name: Deploy to Azure Function App
      uses: Azure/functions-action@v1
      id: deploy-to-function
      with:
        app-name: 'fastapifn'
        slot-name: 'Production'
        package: ${{ env.AZURE_FUNCTIONAPP_PACKAGE_PATH }}
        publish-profile: ${{ secrets.AZUREAPPSERVICE_PUBLISHPROFILE }}
