name: Deploy to Azure Function App

on:
  push:
    branches:
      - main
  workflow_dispatch:

env:
  AZURE_FUNCTIONAPP_PACKAGE_PATH: '.'
  PYTHON_VERSION: '3.9'

jobs:
  build:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Setup Python version
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install Poetry
      uses: snok/install-poetry@v1
      with:
        version: latest
        virtualenvs-create: true
        virtualenvs-in-project: true

    - name: Load cached venv
      id: cached-poetry-dependencies
      uses: actions/cache@v3
      with:
        path: .venv
        key: venv-${{ runner.os }}-${{ steps.setup-python.outputs.python-version }}-${{ hashFiles('**/poetry.lock') }}

    - name: Install dependencies
      if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
      run: poetry install --no-interaction --without dev

    - name: Run Quick Tests (Optional)
      run: |
        poetry install --with dev
        poetry run pytest tests/ --tb=short -q || echo "Tests completed with issues"

    - name: Create requirements.txt for Azure Functions
      run: |
        poetry export -f requirements.txt --output requirements.txt --without-hashes --without dev
        # Remove problematic dependencies
        sed -i '/grpcio/d' requirements.txt
        sed -i '/grpcio-tools/d' requirements.txt
        # Add essential Azure Functions dependencies
        echo "azure-functions" >> requirements.txt
        echo "azure-functions-worker" >> requirements.txt
        echo "fastapi" >> requirements.txt

    - name: Display requirements.txt
      run: |
        echo "=== Generated requirements.txt ==="
        cat requirements.txt

    - name: Prepare deployment package
      run: |
        # Remove unnecessary files for deployment
        rm -rf .venv/
        rm -rf tests/
        rm -rf .pytest_cache/
        rm -rf __pycache__/
        rm -rf .coverage
        rm -f coverage.xml
        rm -f test-results.xml
        rm -rf htmlcov/
        find . -type d -name "__pycache__" -exec rm -rf {} + 2>/dev/null || true
        find . -name "*.pyc" -delete 2>/dev/null || true

    - name: Upload artifact for deployment job
      uses: actions/upload-artifact@v3
      with:
        name: python-app
        path: |
          .
          !.git/
          !.github/
          !.venv/
          !tests/
          !.pytest_cache/
          !__pycache__/
          !*.pyc
          !.coverage
          !coverage.xml
          !test-results.xml
          !htmlcov/

  deploy:
    runs-on: ubuntu-latest
    needs: build
    environment:
      name: 'Production'
      url: ${{ steps.deploy-to-function.outputs.webapp-url }}

    steps:
    - name: Download artifact from build job
      uses: actions/download-artifact@v3
      with:
        name: python-app

    - name: Display deployment package contents
      run: |
        echo "=== Deployment Package Contents ==="
        ls -la
        echo ""
        echo "=== App Directory Contents ==="
        ls -la app/ || echo "No app directory found"
        echo ""
        echo "=== HttpExample Directory Contents ==="
        ls -la HttpExample/ || echo "No HttpExample directory found"

    - name: Deploy to Azure Function App
      uses: Azure/functions-action@v1
      id: deploy-to-function
      with:
        app-name: 'fastapifn'
        slot-name: 'Production'
        package: ${{ env.AZURE_FUNCTIONAPP_PACKAGE_PATH }}
        publish-profile: ${{ secrets.AZUREAPPSERVICE_PUBLISHPROFILE }}

    - name: Deployment Success Notification
      run: |
        echo "ðŸš€ Deployment completed successfully!"
        echo "Function App URL: ${{ steps.deploy-to-function.outputs.webapp-url }}"
